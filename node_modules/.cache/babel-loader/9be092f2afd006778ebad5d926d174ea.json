{"ast":null,"code":"import _slicedToArray from \"C:/Users/roste/Downloads/widgets-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\roste\\\\Downloads\\\\widgets-app\\\\src\\\\components\\\\Dropdown.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport react, { useState, useEffect, useRef } from \"react\"; // All the event listeners that were wired by addEventListener will be called before React\n// eventListener and then React element will be called in order of child to parent(event bubbling.)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Dropdown = function Dropdown(_ref) {\n  _s();\n\n  var options = _ref.options,\n      selected = _ref.selected,\n      onSelected = _ref.onSelected;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var ref = useRef();\n  useEffect(function () {\n    document.body.addEventListener(\"click\", function (event) {\n      if (ref.current.contains(event.target)) {\n        return;\n      }\n\n      setOpen(false);\n    });\n  }, []);\n  var renderedOptions = options.map(function (option, index) {\n    if (option.value === selected.value) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      onClick: function onClick() {\n        onSelected(option);\n      },\n      children: option.label\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, _this);\n  }); // console.log(ref.current);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"ui form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: \"Select a color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: function onClick() {\n          setOpen(!open);\n        },\n        className: \"ui selected dropdown \".concat(open ? \"visible active\" : \"\"),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"dropdown icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: selected.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"menu \".concat(open ? \"visible transition\" : \"\"),\n          children: renderedOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Dropdown, \"wl9VvfhnMVWQ+kCekFjcRPEi3/0=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["C:/Users/roste/Downloads/widgets-app/src/components/Dropdown.js"],"names":["react","useState","useEffect","useRef","Dropdown","options","selected","onSelected","open","setOpen","ref","document","body","addEventListener","event","current","contains","target","renderedOptions","map","option","index","value","label"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD,C,CACA;AACA;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAuC;AAAA;;AAAA,MAApCC,OAAoC,QAApCA,OAAoC;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AACtD,kBAAwBN,QAAQ,CAAC,KAAD,CAAhC;AAAA;AAAA,MAAOO,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,GAAG,GAAGP,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAwC,UAACC,KAAD,EAAW;AACjD,UAAIJ,GAAG,CAACK,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAAJ,EAAwC;AACtC;AACD;;AAEDR,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAND;AAOD,GARQ,EAQN,EARM,CAAT;AAUA,MAAMS,eAAe,GAAGb,OAAO,CAACc,GAAR,CAAY,UAACC,MAAD,EAASC,KAAT,EAAmB;AACrD,QAAID,MAAM,CAACE,KAAP,KAAiBhB,QAAQ,CAACgB,KAA9B,EAAqC;AACnC,aAAO,IAAP;AACD;;AACD,wBACE;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,OAAO,EAAE,mBAAM;AACbf,QAAAA,UAAU,CAACa,MAAD,CAAV;AACD,OALH;AAAA,gBAOGA,MAAM,CAACG;AAPV,OACOF,KADP;AAAA;AAAA;AAAA;AAAA,aADF;AAWD,GAfuB,CAAxB,CAdsD,CA+BtD;;AAEA,sBACE;AAAK,IAAA,GAAG,EAAEX,GAAV;AAAe,IAAA,SAAS,EAAC,SAAzB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AACE,QAAA,OAAO,EAAE,mBAAM;AACbD,UAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,SAHH;AAIE,QAAA,SAAS,iCAA0BA,IAAI,GAAG,gBAAH,GAAsB,EAApD,CAJX;AAAA,gCAME;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,iBANF,eAOE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,oBAAuBF,QAAQ,CAACiB;AAAhC;AAAA;AAAA;AAAA;AAAA,iBAPF,eAQE;AAAK,UAAA,SAAS,iBAAUf,IAAI,GAAG,oBAAH,GAA0B,EAAxC,CAAd;AAAA,oBACGU;AADH;AAAA;AAAA;AAAA;AAAA,iBARF;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAmBD,CApDD;;GAAMd,Q;;KAAAA,Q;AAsDN,eAAeA,QAAf","sourcesContent":["import react, { useState, useEffect, useRef } from \"react\";\r\n// All the event listeners that were wired by addEventListener will be called before React\r\n// eventListener and then React element will be called in order of child to parent(event bubbling.)\r\n\r\nconst Dropdown = ({ options, selected, onSelected }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    document.body.addEventListener(\"click\", (event) => {\r\n      if (ref.current.contains(event.target)) {\r\n        return;\r\n      }\r\n\r\n      setOpen(false);\r\n    });\r\n  }, []);\r\n\r\n  const renderedOptions = options.map((option, index) => {\r\n    if (option.value === selected.value) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"item\"\r\n        onClick={() => {\r\n          onSelected(option);\r\n        }}\r\n      >\r\n        {option.label}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  // console.log(ref.current);\r\n\r\n  return (\r\n    <div ref={ref} className=\"ui form\">\r\n      <div className=\"field\">\r\n        <label className=\"label\">Select a color</label>\r\n        <div\r\n          onClick={() => {\r\n            setOpen(!open);\r\n          }}\r\n          className={`ui selected dropdown ${open ? \"visible active\" : \"\"}`}\r\n        >\r\n          <i className=\"dropdown icon\"></i>\r\n          <div className=\"text\">{selected.label}</div>\r\n          <div className={`menu ${open ? \"visible transition\" : \"\"}`}>\r\n            {renderedOptions}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n"]},"metadata":{},"sourceType":"module"}